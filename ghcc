#!/usr/bin/env ruby
require "thor"
require "sequel"
require_relative "lib/commands/contributions/process_contributions"
require_relative "lib/commands/commits/refresh"
require_relative "lib/shared/database"
require_relative "lib/shared/logger"
require_relative 'lib/commands/pull_requests/refresh'
require_relative 'lib/commands/users/users'
require_relative 'lib/commands/repos/repo'
require_relative 'lib/commands/reviews/reviews'

class GHCC < Thor
  def self.exit_on_failure?
    true
  end
  # class_option :verbose, :type => :boolean

  desc "contributions", "Get contributions from user(s)"
  method_option :start_date,
                :type => :string, default: "#{Date.today - 14}",
                :desc => "First date to start counting contributions"
  method_option :end_date,
                :type => :string,
                default: "#{Date.today}",
                :desc => "Last date to count contributions"
  def contributions
    start_date = Date.parse(options[:start_date])
    end_date = Date.parse(options[:end_date])
    get_connection do |db|
      get_contributions(db, start_date, end_date)
    end
  end

  desc "commits", "Adds commits to contributions"
  method_option :repo,
                :type => :string,
                default: "kin/report-service",
                :desc => "Name of the repository you want to get commits for"
  def commits
    logger = get_logger
    repo = options[:repo]
    get_connection do |db|
      refresh_commits(db, repo, logger)
    end
  end
  
  desc "users", "manage github users"
  subcommand "users", Users
  
  desc "repos", "manage github repositories"
  subcommand "repos", Repo
  
  desc "reviews", "manage github reviews"
  subcommand "reviews", Reviews
  
  desc "pull_requests", "Refresh pull requests"
  def pull_requests
    client = get_client
    client.auto_paginate = false
    logger = get_logger
    get_connection do |db|
      refresh_pull_requests(db, client, logger)
    end
  end
  
  desc "install", "Symlinks this file to /usr/local/bin"
  def install
    File.symlink(File.expand_path(__FILE__), "/usr/local/bin/#{File.basename(__FILE__)}")
  end

  desc "run_migrations", "Updates current data model"
  def run_migrations
    Sequel.extension :migration
    get_connection do |db| 
      Sequel::Migrator.run(db, "#{__dir__}/lib/migrations")
    end
  end
end

GHCC.start(ARGV)
