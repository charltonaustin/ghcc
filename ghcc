#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'fylla'
require 'cli'
require 'sequel'
require_relative 'lib/commands/contributions/process_contributions'
require_relative 'lib/commands/commits/refresh'
require_relative 'lib/shared/database'
require_relative 'lib/shared/logger'
require_relative 'lib/commands/pull_requests/refresh'
require_relative 'lib/commands/users/command'
require_relative 'lib/commands/repos/command'
require_relative 'lib/commands/reviews/command'
require_relative 'lib/commands/contributions/command'
require_relative 'lib/commands/dev/command'
require_relative 'lib/commands/orgs/command'

class GHCC < Thor
  class_option :v, type: :boolean

  def self.exit_on_failure?
    true
  end

  desc 'gc', 'generate completions'

  def gc
    File.write(File.expand_path("~/.oh-my-zsh/completions/_#{File.basename(__FILE__)}"), Fylla.zsh_completion(self))
  end

  desc 'commits', 'Adds commits to contributions'
  method_option :repo,
                type: :string,
                default: 'charltonaustin/ghcc',
                desc: 'Name of the repository you want to get commits for'

  def commits
    logger = get_logger(options)
    repo = options[:repo]
    get_connection do |db|
      output = refresh_commits(db, repo, logger)
      puts "refreshed #{output.size} commits in #{repo}"
    end
  end

  desc 'orgs', 'Create new organizations'
  subcommand 'orgs', Orgs::Command

  desc 'dev', 'dev commands'
  subcommand 'dev', Dev::Command

  desc 'contributions', 'Get user contributions'
  subcommand 'contributions', Contributions::Command

  desc 'users', 'Manage github users'
  subcommand 'users', Users::Command

  desc 'repos', 'Manage github repositories'
  subcommand 'repos', Repos::Command

  desc 'reviews', 'Manage github reviews'
  subcommand 'reviews', Reviews::Command

  desc 'prs', 'Refresh pull requests'

  def prs
    client = git_client
    client.auto_paginate = false
    logger = get_logger
    get_connection do |db|
      refresh_pull_requests(db, client, logger)
    end
  end
end

Fylla.load(File.basename(__FILE__).to_s)
trap('SIGINT') { throw :ctrl_c }

catch :ctrl_c do
  GHCC.start(ARGV)
end
